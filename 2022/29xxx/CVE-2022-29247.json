{
    "CVE_data_meta": {
        "ASSIGNER": "security-advisories@github.com",
        "ID": "CVE-2022-29247",
        "STATE": "PUBLIC",
        "TITLE": "Exposure of Resource to Wrong Sphere in Electron"
    },
    "affects": {
        "vendor": {
            "vendor_data": [
                {
                    "product": {
                        "product_data": [
                            {
                                "product_name": "electron",
                                "version": {
                                    "version_data": [
                                        {
                                            "version_value": "< 15.5.5"
                                        },
                                        {
                                            "version_value": ">= 16.0.0-beta.1, < 16.2.6"
                                        },
                                        {
                                            "version_value": ">= 17.0.0-beta.1, < 17.2.0"
                                        },
                                        {
                                            "version_value": ">= 18.0.0-beta.1, <= 18.0.0-beta.5"
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "vendor_name": "electron"
                }
            ]
        }
    },
    "data_format": "MITRE",
    "data_type": "CVE",
    "data_version": "4.0",
    "description": {
        "description_data": [
            {
                "lang": "eng",
                "value": "Electron is a framework for writing cross-platform desktop applications using JavaScript (JS), HTML, and CSS. A vulnerability in versions prior to 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 allows a renderer with JS execution to obtain access to a new renderer process with `nodeIntegrationInSubFrames` enabled which in turn allows effective access to `ipcRenderer`. The `nodeIntegrationInSubFrames` option does not implicitly grant Node.js access. Rather, it depends on the existing sandbox setting. If an application is sandboxed, then `nodeIntegrationInSubFrames` just gives access to the sandboxed renderer APIs, which include `ipcRenderer`. If the application then additionally exposes IPC messages without IPC `senderFrame` validation that perform privileged actions or return confidential data this access to `ipcRenderer` can in turn compromise your application / user even with the sandbox enabled. Electron versions 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 contain a fix for this issue. As a workaround, ensure that all IPC message handlers appropriately validate `senderFrame`."
            }
        ]
    },
    "impact": {
        "cvss": {
            "attackComplexity": "HIGH",
            "attackVector": "NETWORK",
            "availabilityImpact": "NONE",
            "baseScore": 2.2,
            "baseSeverity": "LOW",
            "confidentialityImpact": "LOW",
            "integrityImpact": "NONE",
            "privilegesRequired": "HIGH",
            "scope": "UNCHANGED",
            "userInteraction": "NONE",
            "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N",
            "version": "3.1"
        }
    },
    "problemtype": {
        "problemtype_data": [
            {
                "description": [
                    {
                        "lang": "eng",
                        "value": "CWE-668: Exposure of Resource to Wrong Sphere"
                    }
                ]
            }
        ]
    },
    "references": {
        "reference_data": [
            {
                "name": "https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7",
                "refsource": "CONFIRM",
                "url": "https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7"
            }
        ]
    },
    "source": {
        "advisory": "GHSA-mq8j-3h7h-p8g7",
        "discovery": "UNKNOWN"
    }
}